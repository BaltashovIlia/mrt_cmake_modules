// *********************************************************
//
// File autogenerated for the ${pkgname} package
// by the mrt_cmake_module package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <stdlib.h>
#include <string>
#include <ros/param.h>
#include <${pkgname}/${ClassName}Config.h>

namespace ${pkgname} {

template <typename T>
inline void getParam(const std::string key, T& val) {
  if (!ros::param::has(key)) {
    ROS_ERROR_STREAM("Parameter '" << key << "' is not defined.");
    std::exit(EXIT_FAILURE);
  } else if (!ros::param::get(key, val)) {
    ROS_ERROR_STREAM("Could not retrieve parameter'" << key << "'. Does it have a different type?");
    std::exit(EXIT_FAILURE);
  }
}

template <typename T>
inline void getParam(const std::string key, T& val, const T& defaultValue) {
  ros::param::param(key, val, defaultValue);
}

struct ${ClassName}Parameters {

$parameters

  static ${ClassName}Parameters& getInstance(){
    static ${ClassName}Parameters p;
    return p;
  }

  void fromParamServer(){
$fromParamServer
  }

  void fromConfig(const ${ClassName}Config& config){
$fromConfig
  }

private:
  ${ClassName}Parameters(){};
};

} // namespace ${pkgname}
